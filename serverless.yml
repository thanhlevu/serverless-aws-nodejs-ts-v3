service: product-api
frameworkVersion: "3"

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: ${self:provider.environment.REGION}
  stage: ${opt:stage, 'dev'}
  environment:
    REGION: eu-central-1 # deploy serverless app to AWS region of "eu-central-1"
    PRODUCTS_TABLE: products-${opt:stage, self:provider.stage}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:GetItem
          Resource:
            "*" # to enable access to all resources.
            # - { "Fn::GetAtt": ["${self:provider.environment.PRODUCTS_TABLE}", "Arn"] }

package:
  individually: true

functions:
  createProduct:
    handler: src/handlers.createProduct
    events:
      - httpApi:
          path: /product
          method: post
  getProduct:
    handler: src/handlers.getProduct
    events:
      - httpApi:
          path: /product/{id}
          method: get
  updateProduct:
    handler: src/handlers.updateProduct
    events:
      - httpApi:
          path: /product/{id}
          method: put
  deleteProduct:
    handler: src/handlers.deleteProduct
    events:
      - httpApi:
          path: /product/{id}
          method: delete
  listProducts:
    handler: src/handlers.listProducts
    events:
      - httpApi:
          path: /products
          method: get

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        KeySchema:
          - AttributeName: productID
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: productID
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
